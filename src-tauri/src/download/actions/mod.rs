#![allow(unused)]
/**
 * –≠—Ç–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ö–æ—Ç—å –∫–∞–∫-—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
 * –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É-—á—Ç–æ —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—ã–π –ø–∏–∑–¥–µ—Ü –ø–æ –ª–æ–≥–∏–∫–µ, –∏ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è –∫–∞–∫ –Ω–µ—Ö—É–π –¥–µ–ª–∞—Ç—å, –ª–æ–ª))
 */

use std::sync::{Arc, Mutex};
use hashbrown::HashMap;
use lazy_static::lazy_static;
use reqwest::Response;
use tokio::{runtime::Runtime, task::{self, JoinHandle}};
use tauri::async_runtime::TokioJoinHandle;

use crate::util::url::join_url;

pub(crate) mod create;
pub(crate) mod read;
pub(crate) mod update;
pub(crate) mod delete;

lazy_static! {
  /// Singleton –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static ref DOWNLOAD_QUEUE: Mutex<Queue> = Mutex::new(Queue::new());
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é (–Ω—É –æ–Ω–∞ —Ç–∏–ø–æ –∫–∞–∫ singleton) –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –≤ –≤–∏–¥–µ –º—å—é—Ç–µ–∫—Å–∞, —Ç–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –Ω–∞–¥–æ –∫–∞–∫-—Ç–æ —Å –Ω–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
/// —Ç–æ –¥–µ—Ä–∂–∏ –ø—Ä–∏–º–µ—Ä –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—Ç—å:
/// ```rs
/// let queue = &mut *get_download_queue().lock().unwrap();
/// queue.add(String::from("magic-rpg"), String::from("Magic RPG #1"));
/// ```
pub(crate) fn get_download_queue() -> &'static Mutex<Queue> {
  &DOWNLOAD_QUEUE
}

/// –ï–¥–∏–Ω–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
#[allow(unused)]
pub(crate) struct DownloadableObject {
  /// –ê–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞
  // magic-rpg
  id: String,
  /// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  // Magic RPG ‚Ññ1
  name: String,
  /// –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
  // 10.4 –º–±–∞–π—Ç/—Å
  speed: f32,
  /// –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  // 100%
  progress: u8,
  /// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç —É–∂–µ —Å–∫–∞—á–∞–ª–æ—Å—å)
  // 0 –º–±
  state: usize,
  /// –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–∞—É–∑—É?
  // false
  paused: bool
}

impl Default for DownloadableObject {
  fn default() -> Self {
    DownloadableObject {
      id: String::new(),
      name: String::new(),
      speed: 0.0,
      progress: 0,
      state: 0,
      paused: false,
    }
  }
}

impl DownloadableObject {
  fn new(
    id: String,
    name: String
  ) -> DownloadableObject {
    DownloadableObject {
      id,
      name,
      ..Default::default()
    }
  }

  // https://localhost/client/magic-rpg
  fn get_download_url(&self) -> String {
    join_url(&format!("client/{}.zip", self.id))
  }

  async fn save_body(
    self: Arc<Self>,
    response: &mut Response
  ) {
    let mut downloaded: usize = 0;

    while let Some(chunk) = response.chunk().await.unwrap() {
      let size = chunk.len();
      downloaded += size;
    }

    log::debug!("Download completed. Downloaded {}MB", downloaded/1_000_000);
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–ª–∏–µ–Ω—Ç–∞
  /// Todo üí° @ –µ—Å–ª–∏ self.paused, —Ç–æ —É–±–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –Ω–∞—Ö—É–π
  async fn start(self: Arc<Self>) {
    log::debug!("Start downloading id({}) name({})", self.id, self.name);
    let url = self.get_download_url();
    let me = Arc::clone(&self);

    let client = reqwest::Client::builder()
      .timeout(std::time::Duration::from_secs(10))
      .build()
      .unwrap();

    let mut response = client.get(url)
      .send()
      .await
      .unwrap();

    me.save_body(&mut response).await;
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–ª–∏–µ–Ω—Ç–∞
  fn pause(&self) {}

  /// –£–±–∏—Ä–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  fn remove(&self) {
    let queue = &mut *get_download_queue().lock().unwrap();

    queue.remove(&self.id);
  }
}

/// –û—á–µ—Ä–µ–¥—å
/// –ö–ª–∞—Å—Å/—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
/// –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
///
/// –ü—Ä–∏–º–µ—Ä—ã:
/// ```rs
/// // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
/// let queue = Queue::new()
/// // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
/// queue.run_watch_thread();
/// // –î–æ–±–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç magic-rpg, –∏ –Ω–∞—á–Ω–µ—Ç –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫—É, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É (—Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –∞—Ä—Ö–∏–≤–∞).
/// queue.add("magic-rpg", "Magic RPG #1")
/// ```
pub(crate) struct Queue {
  /// –°–ø–∏—Å–æ–∫-–æ—á–µ—Ä–µ–¥—å
  queue: HashMap<String, Arc<DownloadableObject>>,
  /// –¢–µ–∫—É—â–∏–π —Å–∫–∞—á–∏–≤–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç
  /// Some(–∞–π–¥–∏ downloadable)
  current_downloadable: Option<String>
}

impl Queue {
  fn new() -> Queue {
    Queue {
      queue: HashMap::<String, Arc<DownloadableObject>>::new(),
      current_downloadable: None
    }
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
  /// todo: emit
  fn add(
    &mut self,
    id: String,
    name: String
  ) {
    self.set_current(id.clone());
    self.start_current();

    self.queue.insert(id.clone(), Arc::new(DownloadableObject::new(id, name)));
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∫–∞—á–∏–≤–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç
  /// todo: emit
  fn set_current(
    &mut self,
    new: String
  ) {
    self.pause_current();
    self.current_downloadable = Some(new);
  }

  /// –í–∫–ª—é—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É/—É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  /// todo: emit
  fn start_current(&mut self) {
    let rt = Runtime::new().unwrap();

    if let Some(id) = &self.current_downloadable {
      if let Some(curr) = self.queue.get(id) {
        let current = Arc::clone(curr);
        rt.block_on(async {
          let ass = tokio::spawn(async move {
            current.start().await;
          }).await;

          println!("{ass:?}");
        });
      }
    }
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É/—É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  /// todo: emit
  fn pause_current(&self) {
    if let Some(id) = &self.current_downloadable {
      if let Some(current) = self.queue.get(id) {
        current.pause();
      }
    }
  }

  /// todo: emit
  fn remove(
    &mut self,
    id: &str
  ) {
    self.queue.remove(id);
  }
}